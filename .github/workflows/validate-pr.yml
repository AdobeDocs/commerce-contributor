---
name: Validate pull request
on:
  pull_request:

jobs:
  # Check if src/pages files were changed
  check-files:
    runs-on: ubuntu-latest
    outputs:
      run_validation: ${{ steps.filter.outputs.run_validation }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for src/pages changes
        id: filter
        run: |
          git fetch origin ${{ github.base_ref }}
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          if echo "$CHANGED_FILES" | grep -q "^src/pages/"; then
            echo "run_validation=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Changes detected in src/pages/"
          else
            echo "run_validation=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è No changes in src/pages/, skipping validation"
          fi

  toc:
    needs: check-files
    if: needs.check-files.outputs.run_validation == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run TOC validation
        run: npm run test:config

  markdown-lint:
    needs: [check-files, toc]
    if: needs.check-files.outputs.run_validation == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Markdown lint
        run: npm run lint:md

  remark-lint:
    needs: [check-files, markdown-lint]
    if: needs.check-files.outputs.run_validation == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Lint DevSite Utils
        run: |
          echo "## Lint Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Run lint and capture output
          set +e
          npm run lint > lint-output.txt 2>&1
          EXIT_CODE=$?
          set -e
          
          # Check if there are warnings or errors in the output
          if grep -q "Files with issues:" lint-output.txt || grep -q "‚ö†Ô∏è  WARNING" lint-output.txt || [ $EXIT_CODE -ne 0 ]; then
            echo "‚ö†Ô∏è **Linting issues detected**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Extract and display summary
            if grep -q "üìä Linting Summary:" lint-output.txt; then
              echo "### Summary" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              sed -n '/üìä Linting Summary:/,/^$/p' lint-output.txt | grep -E "(Files processed|Files with issues|Total issues|Warnings|fatal)" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Display detailed issues
            echo "### Detailed issues" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            # Extract file paths and their associated warnings/errors
            grep -B 1 -E "‚ö†Ô∏è|‚ùå|WARNING|ERROR" lint-output.txt | grep -E "^src/pages/.*:|‚ö†Ô∏è|‚ùå|WARNING|ERROR" >> $GITHUB_STEP_SUMMARY || cat lint-output.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            
            # Output to console as well
            cat lint-output.txt
            rm lint-output.txt
            
            echo "::warning::Warnings found but no fatal errors. See job summary for details."
            
            # Save warning status for the comment workflow
            echo "true" > has-warnings.txt
            echo "${{ github.event.pull_request.number }}" > pr-number.txt
          else
            echo "‚úÖ **No issues found!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All files passed linting checks." >> $GITHUB_STEP_SUMMARY
            rm -f lint-output.txt
            
            # Save no-warning status
            echo "false" > has-warnings.txt
            echo "${{ github.event.pull_request.number }}" > pr-number.txt
          fi

      - name: Upload lint results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-results
          path: |
            has-warnings.txt
            pr-number.txt

  # Gate job that always runs and becomes the required check
  validate-pr:
    runs-on: ubuntu-latest
    needs: [check-files, toc, markdown-lint, remark-lint]
    if: always()
    steps:
      - name: Check validation results
        run: |
          # If no src/pages files changed, pass automatically
          if [[ "${{ needs.check-files.outputs.run_validation }}" == "false" ]]; then
            echo "‚úÖ No src/pages/ files changed - validation skipped"
            exit 0
          fi
          
          # If src/pages files changed, check that all validation jobs succeeded
          if [[ "${{ needs.toc.result }}" == "success" ]] && \
             [[ "${{ needs.markdown-lint.result }}" == "success" ]] && \
             [[ "${{ needs.remark-lint.result }}" == "success" ]]; then
            echo "‚úÖ All validation checks passed"
            exit 0
          else
            echo "‚ùå One or more validation checks failed"
            echo "TOC: ${{ needs.toc.result }}"
            echo "Markdown Lint: ${{ needs.markdown-lint.result }}"
            echo "Remark Lint: ${{ needs.remark-lint.result }}"
            exit 1
          fi
